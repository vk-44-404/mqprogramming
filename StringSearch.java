package dmth237AssignmentQ6;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class StringSearch {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String[] data = { // randomstrings.txt in string array form:
				"0010011101000100001011011100010111111001110000100000101000110010000000111000011110010110100101101001",
				"1110100111100110101011001001010111111100110100110010001111110100101000000101011101110110110110100000",
				"0010011100010001000010001011101011110100000001110001010111101000001111000011010100111101101110111111",
				"1000011111000101000011010010001001101000011111001001000101000101010101000111100110001111001101000000",
				"0100000110001001010111111000011011010010010101111010100100001010000010111111110111111100011000101111",
				"1100111110111101001001010001001111101010111101001000010011101000100111011000111010111100110001011000",
				"1100101110111101010001010001000100111011110001111111100101000101011110111010100100001010100010110011",
				"1010000000010110110111000011111001011001010000110110010000100111111001100100011011001010010010000000",
				"1100110010100100001000000110110100001011011011010000001011110100110000111101110000110011000111110110",
				"1101011011010001000000000011010101010100000110101001000011100101000010100100001001010010001011111110",
				"1100000110011101111011110100010001110011100000100110011010100110110101100000111001100111001010001100",
				"0101001101011010111001110111110100011001100010001011100111111010010100000110110011011011100101100000",
				"1101010011111111000110010010010100110001110101001010100000011001110010110010101111101111111010011001",
				"0011111010100100001111101111001001000010011110011001011111010010100111011011100110010001111111000101",
				"0010110001111111000101111010010110101110101110000111000001101001010110101110001101101010101011110110",
				"1111100000000010000111110111110100010001001010001111110111010111010100001011101000111010111001000011",
				"1100000101001110000111000011011010110100001110111100111101100110010010010011101100000000011101011101",
				"0111001110010000100001011001111001110011011000011100011100110000010000011111000010111001110110000110",
				"1000100101000111010011011110101010011101001001100110100111110000111011111000001100000001010011111110",
				"1101001001100001000111001010110010000111110100010011111010000001011010010010000001011111100101010101",
				"1111101011111111100001101101001101110101101001111100100110000001011100100101001100010101000100100010",
				"0100100110100100101001001111101011011000110111100111100101000110010110100100000111010110000101011101",
				"0011101010100100100101111011110011010101110011011100100111000101111111001111100101110001101010100010",
				"0100100100010110110011001101001111001000000111011011101110110010011011011000010101010001011101001000",
				"0110100010110011000100010111001101000110110011111011111010001100100111101010001111001110101001011101",
				"1001011001100100110101000000111000101001101100000101100100110100000011111101000101000100000111000010",
				"1001111000010001001110100101001010100001011100110110110101010010010101001100000110001110110110100101",
				"1000010111010010111001010011011100000000101111110100100111101111001011000101101101000001000100100100",
				"1010111000011100111111110000000100100110001001010000011000001111010011100101010100000010011000110011",
				"0110001111101010010101100111100000011011010010110001100001101001100101101100010000110100010110101110",
				"0001010100100100001000110110110110011111000100000100001111010000010110111011000111101001010001110110",
				"0100000101100011101010110101010110001011000010100111111001110101100001011010001100110110100110001011",
				"0101011001010010110101010001111101011101010001100101010000000010011001100000111100111010111000010101",
				"0011000100110111100100100110010000101101011100100011010010100000110100000111000001100101010100000111",
				"1010000011110011111011110001010101010110111100001000010011011010110111110000111011010001001011101100",
				"0101110011001010111100100111101110010000111101111000010111011001011110000011111101001101001101110000",
				"1010010101101001111010110000100010010101101100011110100110010001101100100101001111110010010011010010",
				"0010011101110111001101100001000011000111011101000101111001001010101101011000100101101000001011100010",
				"1101011001001101001000000001100001000101111111110100111000110000111010001101110011000100100000011011",
				"1000011111000010100111110001101001101111110000110010000011100001011011010001010000100011101111110100",
				"1011011010011001111010100001101100001011001010101100001101001101101111011011110100100011111101000010",
				"1101000101110011011011001000110101010001001100011111010100011110011111101110010110000110001010010111",
				"1000110000011010010001001110100010010100110100010100010011110100011101000101110100111011001101100111",
				"0111100100101110010101101100110010011111010010100110110111000011001011011011000000010110111001100000",
				"1011001011000010011010110110100111100001110101000110000001110000000011111111110101011111100001000011",
				"1101101001100111111101000100101000110010000101111010011111010011001000000111010110110011110100000000",
				"1011000101011010000111110011011100111000001001001110001110001100100101110111010001100000101110100110",
				"1001110110100110000101100100100011010111110000111110111111110010100111011001101011001001000000111101",
				"1011100100000110000111000001010001111111100011011111011000101101010001110100110011111011001010010000",
				"0110010001100101000010011101100011000010101110101010000011000110000001010001011110011011000110110100",
				"0000011110101110000000101000110111001110001110111110010101010111001110000000010110011101111100001100",
				"0110101010110010001001011101000100100110110000101011100111110101011001110110010000011010110101111101",
				"1101101000101100010011000100100010101100010110100010011010111001000100000111111110111010000100001100",
				"0011101000010110110000101010011000011001111000100010101000100010111010111000101001110101111101111110",
				"1111111011100010011111110101011010100110111001001101001011011101001111100110011011000001110111011011",
				"0111100010101100111011100110111010011010000011101010110110010110011110011100011000000111011111001010",
				"1001101001011101000011000101110111110111001001001010011111100100001000000110010110011010001001001110",
				"0001100001111011100010110100000010011000001011111101101101100110001101010101110011000100011000000111",
				"0110010000001111001001001000101111111100000100000101101011101000010101001011100101000101011111011010",
				"1100110100101110010011011000010101110001000001001010010000100001111101000001111110101110011010000111",
				"1010010110100100101011111100001010100000001101010010110000100100011101011101110011000111110100101000",
				"1110000011100000111110011110110100001101110100001010010111101111000010000101011111000100110000001011",
				"1110110001011010100111001110101111001100001110000000010011101011110100101100101111001001010101001101",
				"0110100011100110001000101111100011111111000000111000100100101010100010111000000101000110111110011010",
				"1001110110100001011010011001100001000011101011111111100111000100101000010110011110100111011100010111",
				"1101010100001010111101000110100001011011111011001110111001010101010010101101101100000111111001011000",
				"1010111100110001001111110001010011000110001011100100100000001001101111001001111100000110100110001110",
				"0011000010000011010001101010110100110111110100101101001010010000111111111001110101111010010000111111",
				"1000011001100010011011000001001000101011101100010110100001001000001010010001101100101101111000101100",
				"0010100000010111110101011101100101110011001011001100000011100111001010101000000110100101100010000110",
				"1000010000111000110100110101001010101110110100111010001011100001100110001001110010000110101001101110",
				"1110101110111011011011011100011111101101101010111111100111010000110011111110101110011010011010111011",
				"0101101111110101000000101001010000111010111000111111011100100111010101011010010010111000111011111111",
				"0101110110111011010010100101100000011010000000011101011000010100010100010011101111001111011010100000",
				"1101010011010110100000011111010000111001000011100001000010111100001101010111011001000100101010011100",
				"1010111011010100000010111000110100101110010101000100001111111110001010010011001101001000011001000111",
				"0100001111010111111101110001111100010001110001011100000011101100100101010101100100100010111100000111",
				"0001001001110001000001001010100001010101001010101110101100110111101111100011111101011100001110010110",
				"0110000011010111011110011000110110000011010010010100011110110010101000010011100110011011110110111000",
				"1011001110100100111001111011001001011000100000000011000000100100111101100111101111111100101100111100",
				"0100110110101110111010101111010000101011010111111110010101110011001001010010100111011100100101111101",
				"0100101111000111100010000011011110101000111100101110100100010111001110110000110110001110000011111100",
				"0001011011000011010110011110101001111010101000000101011000110011111110000000010111010001110000100110",
				"1011011000001011001000000101000011010001110000111111100001110001111000111100000010100111101011110011",
				"0000101011010010111111000000011110111110100010101100111100101010011100101100010010010000001111010100",
				"1011101100011100101001101011100010011000001101100000010000010101010010100011100010000111111010100101",
				"0100101010011000100111110101010001101000000000100111001010111001110111011000000000000000000001110100",
				"0010110000011100101010110100011101010001011101011011111110000100110010000010110000000111010011101100",
				"0011000000010010100100010100110111110110001001011101101010010110001011101010011010110010001110101100",
				"1011011001111010001010111101101011001111110011100101111111101001100011100101001100100011011111100100",
				"0111010101101001001110101100011100001111110101011100001100001110110110100000101000101010111100010110",
				"0000010100011011110000010010000110110001111111011101001111110010001011101110001001000010001101100001",
				"0100110111110111011101001010101101011100100100110000011011011111101001001011011101101001001010111011",
				"1111110111101011100001110101010011000100010001110010101011001101011001001101011010100001000110111000",
				"1100011110111011111100100111010110110110000001111011111110110100001001111000111110011100100001010111",
				"0101110011110110010011100000100110001001101110101101100001110010101111010101000001111100100111100110",
				"1011000001010010110010100100000011111010010000011101010010000000001111100100111001000000011111010111",
				"0011011100101000001001010011010111010111110011001110010110100001101000101010000111011110101101100010",
				"1111110111001111110110001001001000010000011001011010011001000111001100010110111010000101000110110011",
				"0011110001010001010011110001010101100110011110001000110010101100111010011010000111101011000101011100" };

		//(i)
		String pattern1 = "00000011111"; // This string is used to set up the pattern below:
		Pattern p1 = Pattern.compile(pattern1); // Pattern 'p' now refers "00000011111"
		String pattern2 = "11111100000";// the process above is repeated for "11111100000"
		//by changing the value of pattern 
		Pattern p2 = Pattern.compile(pattern2); // pattern2 is compiled
		for (int i = 0; i < data.length; i++) { // loop created to go from 0 to 99
			Matcher m = p1.matcher(data[i]); // matcher 'm' or 'n' is true if 'p' (e.g. "00000011111") is contained
			Matcher n = p2.matcher(data[i]); // in the string checked at data[z].
			if (m.find() || n.find()) { // if a match is found:
				//System.out.println("Line: " + (i+1) + " matches the given regular expression: " + data[i]);
				// prints the Line number + the string which matched the regular expression. 
			}
		}
		//(ii)
		String pattern = "00101010101"; // This string is used to set up the pattern below:
		Pattern p = Pattern.compile(pattern); // Pattern 'p' now refers "00101010101"
		for (int j = 0; j < data.length; j++) { // loop created to go from 0 to 99
			Matcher m = p.matcher(data[j]); // matcher 'm' is true if 'p' (i.e. "00101010101") is contained
			// in the string checked at data[z].
			if (m.find()) { // if a match is found:
				//System.out.println("Line: " + (j+1) + " matches the given regular expression: " + data[j]);
				// prints the Line number + the string which matched the regular expression. 
			}
		}
		
		//(iii)
		String patternS = "000000"; // This string sets up patternS(tart), with "000000"
		String patternE ="111111"; // This string sets up patternE(nd), with "111111"
		String patternM = "\\d{14}"; // This string sets up patternM(id), with "\\d{14}" 
		// d{n} = d = digits between 0-9, {n} = number of times digits repeat
		// so d{14} = 14 digits between 0-9
		String patternC = patternS + patternM + patternE; // combines starting pattern
		// with mid pattern with ending pattern - 000000 d{14} 111111
		Pattern pC = Pattern.compile(patternC); // Pattern 'pC' now refers to patternC(combined)
		for (int z = 0; z < data.length; z++) { // loop created to go from 0 to 99
			Matcher mC = pC.matcher(data[z]); // matcher 'mC' is true if 'p' (i.e. "000000"+14digits+"111111") 
			// is contained in the string checked at data[z].
			if (mC.find()) { // if a match is found for pC,
				System.out.println("Line: " + (z+1) + " matches the given regular expression: " + data[z]);
				// prints the Line number + the string which matched the regular expression. 
			}
		}

	}

}
