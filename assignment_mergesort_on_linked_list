	void sortTrack() { // TODO
		head = mergeSort(this.head());
		// Sorts (ascending) the list according to the name of the track
	}

	musicNode mergeSort(musicNode h) {
		if (h == null){
			return h;
		}
		if (h.next == null) {
			return h;
		}
		int count = 0;
		musicNode e = h;
		while (e != null) {
			count++;
			e = e.next;
		}
		int middle = count/2;
		musicNode l = h;
		musicNode r = new musicNode();
		musicNode p = h;
		int countHalf = 0;
		
		while (p != null) {
			countHalf++;
			musicNode next = p.next;
			if (countHalf == middle) {
				r = next;
				p.next = null;
				break;
			}
			p = next;
		}
		musicNode x = mergeSort(l);
		musicNode y = mergeSort(r);

		musicNode xy = merge(x, y);
		
		return xy;
	}

	musicNode merge(musicNode left, musicNode right) {
  // reference to ensure correct codes are being checked
		System.out.println(left.track + " is being merged with " + right.track);
    
		musicNode lp = left;
		musicNode rp = right;
		
		musicNode newHead = new musicNode();
		musicNode curr = newHead;
		while (lp != null || rp != null) {
			if (lp == null) {
				curr.next = rp;
				break;
			}
			else if (rp == null) {
				curr.next = lp; 
				break;
			}
			else {
				if (lp.track.compareTo(rp.track) <= 0) {
					curr.next = lp;
					lp = lp.next;
					curr = curr.next;
				}
				else if (lp.track.compareTo(rp.track) > 0){
					curr.next = rp;
					rp = rp.next;
					curr = curr.next;
				}
			}
		}
		return newHead.next;
	}
